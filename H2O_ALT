local Player = game.Players.LocalPlayer
local Character = Player.Character
local HumanoidRootPart
if Character then
	HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
end

Player.CharacterAdded:Connect(function(New)
	Character = New
	HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
end)

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("H2O Mermaid Testing Gui", "DarkTheme")
-- Tabs
local AbilityTab = Window:NewTab("Abilities")
local GlobalTab = Window:NewTab("Global Abilities")
local UniqueTab = Window:NewTab("Unique Abilities")
local TeleportTab = Window:NewTab("Teleports")
local CharacterTab = Window:NewTab("Characters")
local MiscTab = Window:NewTab("Misc")
local ScriptsTab = Window:NewTab("Other Scripts")
local CreditsTab = Window:NewTab("Credits")
-- Sections
local KeybindSection = AbilityTab:NewSection("Keybinds (Must Be Mermaid)")
local GlobalSection = GlobalTab:NewSection("Global Abilities (Must be Mermaid)")
local UniqueSection = UniqueTab:NewSection("Unique Abilities (Must be Mermaid)")
local JellySection = UniqueTab:NewSection("Jelly Structures (Must be Mermaid)")
local TeleportPlayerSection = TeleportTab:NewSection("Player")
local LocationSection = TeleportTab:NewSection("Locations")
local CharacterSection = CharacterTab:NewSection("Character Selection")
local CustomSection = CharacterTab:NewSection("Customs")
local MiscSection = MiscTab:NewSection("Miscellaneous")
local ParticleSection = MiscTab:NewSection("Particles")
local ScriptSection = ScriptsTab:NewSection("Scripts")
local CreditsSection = CreditsTab:NewSection("Credits")

-- Credits

local Creator = CreditsSection:NewLabel("Created by Shinji")
local Discord = CreditsSection:NewLabel("Discord: Shinji#8186")
local Server = CreditsSection:NewLabel("Discord Server: discord.gg/nXXyWrqq3Q")
local Inspiration = CreditsSection:NewLabel("Inspired by NTM")

local Post = game.ReplicatedStorage:FindFirstChild("Post")
local Get = game.ReplicatedStorage:FindFirstChild("Get")
local MouseTarget
local MousePosition
local HoldingWater = false

function FindPlayer(Name)
	for i, v in pairs(game.Players:GetPlayers()) do
		if Name.match(Name, (string.lower(v.Name)):sub(1, #Name)) then
			return v
		end 
	end
end

-- Ability Gui

KeybindSection:NewKeybind("Water Bubble (Doesn't Move)", "Cleo's Water Bubble Ability", Enum.KeyCode.Q, function()
	if not HoldingWater then
		Get:InvokeServer("FormWater", MousePosition)
		HoldingWater = true
	else
		Get:InvokeServer("LaunchWater", MousePosition)
		HoldingWater = false
	end
end)

KeybindSection:NewKeybind("Freeze", "Emma's Freeze Ability", Enum.KeyCode.E, function()
	if MouseTarget.Name == "Water" then
		Post:FireServer("FreezeWater", MouseTarget)
	end
end)

KeybindSection:NewKeybind("Boil", "Rikki's Boil Ability", Enum.KeyCode.R, function()
	if MouseTarget.Name == "Water" then
		Post:FireServer("BoilWater", MouseTarget)
	elseif MouseTarget:FindFirstAncestorWhichIsA("Model") then
		local Model = MouseTarget:FindFirstAncestorWhichIsA("Model")
		if Model.Name == "Tail" then
			Post:FireServer("SteamDry", Model.Parent)
		elseif Model:FindFirstChild("Humanoid") then
			Post:FireServer("SteamDry", Model)
		end
	end
end)

KeybindSection:NewKeybind("Jelly Step", "Bella's Jelly Step Creation Ability", Enum.KeyCode.F, function()
	Post:FireServer("JellyStep", MousePosition)
end)

-- Global Gui

local PlayerIncluded = true
local WetLoop = false
local FreezeLoop = false
local BoilLoop = false

GlobalSection:NewDropdown("All", "DropdownInf", {"All", "Others"}, function(currentOption)
	if currentOption == "All" then
		PlayerIncluded = true
	else
		PlayerIncluded = false
	end
end)

GlobalSection:NewButton("Wet", "Turn Every Mermaid", function()
	for i, v in pairs(game.Players:GetPlayers()) do
		if v == Player then
			if PlayerIncluded then
				if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
					Get:InvokeServer("FormWater", HumanoidRootPart.Position)
					Get:InvokeServer("LaunchWater", HumanoidRootPart.Position)
				end
			end
		else
			if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
				Get:InvokeServer("FormWater", v.Character.HumanoidRootPart.Position)
				Get:InvokeServer("LaunchWater", v.Character.HumanoidRootPart.Position)
			end
		end
	end
end)

GlobalSection:NewButton("Freeze", "Freeze All Water Bubbles", function()
	for i, v in pairs(workspace:GetChildren()) do
		if v.Name == "Water" then
			Post:FireServer("FreezeWater", v)
		end
	end
end)

GlobalSection:NewButton("Boil", "Boil All Water Bubbles And Dry Everyone", function()
	for i, v in pairs(workspace:GetChildren()) do
		if v.Name == "Water" then
			Post:FireServer("BoilWater", v)
		end
	end
	for i, v in pairs(game.Players:GetPlayers()) do
		if v == Player then
			if PlayerIncluded then
				Post:FireServer("SteamDry", Character)
			end
		else
			Post:FireServer("SteamDry", v.Character)
		end
	end
end)

GlobalSection:NewToggle("Loop Wet", "Loops The Wet Button", function(state)
	if state then
		local StartLoop = coroutine.create(Loop)
		coroutine.resume(StartLoop, "Wet")
	else
		WetLoop = false
	end
end)

GlobalSection:NewToggle("Loop Freeze", "Loops The Freeze Button", function(state)
	if state then
		local StartLoop = coroutine.create(Loop)
		coroutine.resume(StartLoop, "Freeze")
	else
		FreezeLoop = false
	end
end)

GlobalSection:NewToggle("Loop Boil", "Loops The Boil Button", function(state)
	if state then
		local StartLoop = coroutine.create(Loop)
		coroutine.resume(StartLoop, "Boil")
	else
		BoilLoop = false
	end
end)

function Loop(Type)
	if Type == "Wet" then
		WetLoop = true
		while task.wait(0.25) and WetLoop do
			for i, v in pairs(game.Players:GetPlayers()) do
				if v == Player then
					if PlayerIncluded then
						if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
							Get:InvokeServer("FormWater", HumanoidRootPart.Position)
							Get:InvokeServer("LaunchWater", HumanoidRootPart.Position)
						end
					end
				else
					if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
						Get:InvokeServer("FormWater", v.Character.HumanoidRootPart.Position)
						Get:InvokeServer("LaunchWater", v.Character.HumanoidRootPart.Position)
					end
				end
			end
		end
	elseif Type == "Freeze" then
		FreezeLoop = true
		while task.wait() and FreezeLoop do
			for i, v in pairs(workspace:GetChildren()) do
				if v.Name == "Water" then
					Post:FireServer("FreezeWater", v)
				end
			end
		end
	elseif Type == "Boil" then
		BoilLoop = true
		while task.wait(0.25) and BoilLoop do
			for i, v in pairs(workspace:GetChildren()) do
				if v.Name == "Water" then
					Post:FireServer("BoilWater", v)
				end
			end
			for i, v in pairs(game.Players:GetPlayers()) do
				if v == Player then
					if PlayerIncluded then
						Post:FireServer("SteamDry", Character)
					end
				else
					Post:FireServer("SteamDry", v.Character)
				end
			end
		end
	end
end

-- Unique Gui

local Target
local Killing = false

UniqueSection:NewKeybind("Kill", "Kill Target With Spam Freeze", Enum.KeyCode.X, function()
	if MouseTarget:FindFirstAncestorWhichIsA("Model") then
		local Model = MouseTarget:FindFirstAncestorWhichIsA("Model")
		if Model.Name == "Tail" then
			Target = Model.Parent
		elseif Model:FindFirstChild("Humanoid") then
			Target = Model
		end
	end
	if Target then
		Killing = true
		while task.wait(0.1) and Killing and Target and Target:FindFirstChild("HumanoidRootPart") and Target:FindFirstChild("Humanoid") and Target.Humanoid.Health > 0 do
			Get:InvokeServer("FormWater", Target.HumanoidRootPart.Position)
			for i, v in pairs(workspace:GetChildren()) do
				if v.Name == "Water" and (Target.HumanoidRootPart.Position - v.Position).Magnitude <= 3 then
					Post:FireServer("FreezeWater", v)
				end
			end
			Get:InvokeServer("LaunchWater", Target.HumanoidRootPart.Position)
		end
	end
end)

UniqueSection:NewButton("Force Cancel Kill", "Unbug Or Spare Victim", function()
	Killing = false
end)

UniqueSection:NewButton("Summon Water Circle", "Creates A Water Circle Around You", function()
	local Step = 0
	while task.wait() and Step ~= 20 do
		local angle = Step * 36 * math.pi / 360
		local positionOnCircle = Vector3.new(math.sin(angle), 0, math.cos(angle)) * 4.5
		Get:InvokeServer("FormWater", HumanoidRootPart.Position + positionOnCircle)
		Get:InvokeServer("LaunchWater", HumanoidRootPart.Position + positionOnCircle)
		Step = Step + 1
	end
end)

UniqueSection:NewButton("Destroy Water Circle", "Destroys Water Circle (If Nearby)", function()
	for i, v in pairs(workspace:GetChildren()) do
		if v.Name == "Water" and (HumanoidRootPart.Position - v.Position).Magnitude <= 7.5 then
			Post:FireServer("BoilWater", v)
		end
	end
end)

UniqueSection:NewButton("Summon Ice Circle", "Creates An Ice Circle Around You", function()
	local Step = 0
	while task.wait() and Step ~= 20 do
		local angle = Step * 36 * math.pi / 360
		local positionOnCircle = Vector3.new(math.sin(angle), 0, math.cos(angle)) * 4.5
		Get:InvokeServer("FormWater", HumanoidRootPart.Position + positionOnCircle)
		for i, v in pairs(workspace:GetChildren()) do
			if v.Name == "Water" and (HumanoidRootPart.Position - v.Position).Magnitude <= 7.5 then
				Post:FireServer("FreezeWater", v)
			end
		end
		Get:InvokeServer("LaunchWater", HumanoidRootPart.Position + positionOnCircle)
		Step = Step + 1
	end
end)

local JellyLoop = false

UniqueSection:NewToggle("Jelly Path", "Automatically Creates Jelly Steps Beneath You", function(state)
	if state then
		JellyLoop = true
		local Height
		while task.wait() and JellyLoop and HumanoidRootPart do
			local Check1 = (HumanoidRootPart.Position - Vector3.new(HumanoidRootPart.Position.X, 64, HumanoidRootPart.Position.Z)).Magnitude
			local Check2 = (HumanoidRootPart.Position - Vector3.new(322.5, 82, 70)).Magnitude
			local Check3 = (HumanoidRootPart.Position - Vector3.new(HumanoidRootPart.Position.X, HumanoidRootPart.Position.Y, 87.5)).Magnitude
			if Check1 <= 7.5 then
				Height = 64
			elseif Check2 <= 25 and Check3 <= 25 then
				Height = 82
			else
				Height = nil
			end
			if Height then
				Post:FireServer("JellyStep", Vector3.new(HumanoidRootPart.Position.X, Height, HumanoidRootPart.Position.Z))
			end
		end
	else
		JellyLoop = false
	end
end)

-- Jelly Gui

local CageLoop = false
local SpawnCageLoop = false
local BridgeLoop = false
local PoolLoop = false

JellySection:NewKeybind("Jelly Cage Player", "Traps Target In A Jelly Cage", Enum.KeyCode.C, function()
	local CageTarget
	if MouseTarget:FindFirstAncestorWhichIsA("Model") then
		local Model = MouseTarget:FindFirstAncestorWhichIsA("Model")
		if Model.Name == "Tail" then
			CageTarget = Model.Parent
		elseif Model:FindFirstChild("Humanoid") then
			CageTarget = Model
		end
	end
	if CageTarget then
		CageLoop = true
		local CreateCage = coroutine.create(PlayerCage)
		coroutine.resume(CreateCage, CageTarget)
	end
end)

function PlayerCage(CageTarget)
	local RootPosition = CageTarget.HumanoidRootPart.Position - Vector3.new(3, 2, 2.5)
	local Step = 0
	local RowHeight = 0
	local Direction = 1
	while task.wait() and CageLoop do
		if Step == 3 then
			Step = 0
			RowHeight = RowHeight + 1
		end
		if RowHeight == 3 then
			if Direction == 6 then
				Direction = 1
			end
			RowHeight = 0
			Direction = Direction + 1
		end
		if Direction == 1 then
			Post:FireServer("JellyStep", Vector3.new(RootPosition.X + RowHeight * 3, RootPosition.Y - 1, RootPosition.Z + Step * 3)) -- Floor
		elseif Direction == 2 then
			Post:FireServer("JellyStep", Vector3.new(RootPosition.X + RowHeight * 3, RootPosition.Y + 5, RootPosition.Z + Step * 3)) -- Ceiling
		elseif Direction == 3 then
			Post:FireServer("JellyStep", Vector3.new(RootPosition.X + Step * 3, RootPosition.Y + RowHeight * 2, RootPosition.Z)) -- Left
		elseif Direction == 4 then
			Post:FireServer("JellyStep", Vector3.new(RootPosition.X + Step * 3, RootPosition.Y + RowHeight * 2, RootPosition.Z + 6)) -- Right
		elseif Direction == 5 then
			Post:FireServer("JellyStep", Vector3.new(RootPosition.X, RootPosition.Y + RowHeight * 2, RootPosition.Z + 3)) -- Front
		elseif Direction == 6 then
			Post:FireServer("JellyStep", Vector3.new(RootPosition.X + 6, RootPosition.Y + RowHeight * 2, RootPosition.Z + 3)) -- Back
		end
		Step = Step + 1
	end
end

JellySection:NewKeybind("Delete Player Jelly Cage(s)", "Releases Your Jelly Prisoners", Enum.KeyCode.V, function()
	CageLoop = false
end)

JellySection:NewToggle("Jelly Cage Spawn", "Creates A Jelly Trap Over Spawn", function(state)
	if state then
		SpawnCageLoop = true
		local StartFloor = coroutine.create(SpawnCage)
		coroutine.resume(StartFloor, "Horizontal", "Floor")
		local StartCeiling = coroutine.create(SpawnCage)
		coroutine.resume(StartCeiling, "Horizontal", "Ceiling")
		local StartFront = coroutine.create(SpawnCage)
		coroutine.resume(StartFront, "Vertical", "Front")
		local StartBack = coroutine.create(SpawnCage)
		coroutine.resume(StartBack, "Vertical", "Back")
		local StartLeft = coroutine.create(SpawnCage)
		coroutine.resume(StartLeft, "Vertical", "Left")
		local StartRight = coroutine.create(SpawnCage)
		coroutine.resume(StartRight, "Vertical", "Right")
	else
		SpawnCageLoop = false
	end
end)

function SpawnCage(Type, Direction)
	if Type == "Horizontal" then
		local Step = 0
		local Row = 0
		while task.wait() and SpawnCageLoop do
			if Step == 14 then
				Step = 0
				Row = Row + 1
			end
			if Row == 14 then
				Row = 0
			end
			if Direction == "Floor" then
				Post:FireServer("JellyStep", Vector3.new(-19.5 + Step * 3, 67.5, -19.5 + Row * 3))
			elseif Direction == "Ceiling" then
				Post:FireServer("JellyStep", Vector3.new(-19.5 + Step * 3, 80, -19.5 + Row * 3))
			end
			Step = Step + 1
		end
	elseif Type == "Vertical" then
		local Step = 0
		local Height = 0
		while task.wait() and SpawnCageLoop do
			if Step == 14 then
				Step = 0
				Height = Height + 1
			end
			if Height == 6 then
				Height = 0
			end
			if Direction == "Left" then
				Post:FireServer("JellyStep", Vector3.new(-19.5 + Step * 3, 69 + Height * 2, -19.5))
			elseif Direction == "Right" then
				Post:FireServer("JellyStep", Vector3.new(-19.5 + Step * 3, 69 + Height * 2, 19.5))
			elseif Direction == "Front" then
				Post:FireServer("JellyStep", Vector3.new(19.5, 69 + Height * 2, -19.5 + Step * 3))
			elseif Direction == "Back" then
				Post:FireServer("JellyStep", Vector3.new(-19.5, 69 + Height * 2, -19.5 + Step * 3))
			end
			Step = Step + 1
		end
	end
end

-- 19.5, 230

JellySection:NewToggle("Jelly Bridge", "Creates A Bridge From Spawn to Mako Island", function(state)
	if state then
		BridgeLoop = true
		local StartLeft = coroutine.create(CreateBridge)
		local StartMiddle = coroutine.create(CreateBridge)
		local StartRight = coroutine.create(CreateBridge)
		coroutine.resume(StartLeft, "Left")
		coroutine.resume(StartMiddle, "Middle")
		coroutine.resume(StartRight, "Right")
	else
		BridgeLoop = false
	end
end)

function CreateBridge(Side)
	if Side == "Left" then
		local Step = 0
		local Row = 0
		while task.wait() and BridgeLoop do
			if Step == 4 then
				Step = 0
				Row = Row + 1
			end
			if Row == 70 then
				Row = 0
			end
			Post:FireServer("JellyStep", Vector3.new(19.5 + Row * 3, 66, -15 + Step * 3))
			Step = Step + 1
		end
	elseif Side == "Middle" then
		local Step = 0
		local Row = 0
		while task.wait() and BridgeLoop do
			if Step == 4 then
				Step = 0
				Row = Row + 1
			end
			if Row == 70 then
				Row = 0
			end
			if Step ~= 3 then
				Post:FireServer("JellyStep", Vector3.new(19.5 + Row * 3, 66, -3 + Step * 3))
			end
			Step = Step + 1
		end
	elseif Side == "Right" then
		local Step = 0
		local Row = 0
		while task.wait() and BridgeLoop do
			if Step == 4 then
				Step = 0
				Row = Row + 1
			end
			if Row == 70 then
				Row = 0
			end
			Post:FireServer("JellyStep", Vector3.new(19.5 + Row * 3, 66, 15 + Step * -3))
			Step = Step + 1
		end
	end
end

JellySection:NewToggle("Seal Moon Pool", "Seals Moon Pool Until Disabled", function(state)
	if state then
		PoolLoop = true
		local Step = 0
		local Row = 0
		while task.wait() and PoolLoop do
			if Step == 8 then
				Step = 0
				Row = Row + 1
			end
			if Row == 7 then
				Row = 0
			end
			Post:FireServer("JellyStep", Vector3.new(302.5 + Step * 3, 64, -9.5 + Row * 3))
			Step = Step + 1
		end
	else
		PoolLoop = false
	end
end)

-- Teleport Gui

TeleportPlayerSection:NewTextBox("Teleport to Player", "Autofills When Entered", function(txt)
	if FindPlayer(txt) then
		Character:PivotTo(FindPlayer(txt).Character.HumanoidRootPart.CFrame)
	end
end)

TeleportPlayerSection:NewButton("Teleport to Random Player", "", function()
	local Number = math.random(1, #game.Players:GetPlayers())
	for i, v in pairs(game.Players:GetPlayers()) do
		if i == Number then
			Character:PivotTo(v.Character.HumanoidRootPart.CFrame)
		end
	end
end)

LocationSection:NewButton("Spawn", "Teleport to Spawn", function()
	Character:PivotTo(CFrame.new(0, 70, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0))
end)

LocationSection:NewButton("Cafe", "Teleport to Cafe", function()
	Character:PivotTo(CFrame.new(-87, 70, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1))
end)

LocationSection:NewButton("Mako Island", "Teleport to Mako Island", function()
	Character:PivotTo(CFrame.new(275, 73.5, -43.5, -1, 0, 0, 0, 1, 0, 0, 0, -1))
end)

LocationSection:NewButton("Moon Pool", "Teleport to Moon Pool", function()
	Character:PivotTo(CFrame.new(315.25, 65, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1))
end)

LocationSection:NewButton("Waterfall", "Teleport to Waterfall", function()
	Character:PivotTo(CFrame.new(335, 95, 47.5000076, 1, 0, 0, 0, 1, 0, 0, 0, 1))
end)

-- Character Gui

local Characters = {"Cleo", "Emma", "Rikki", "Charlotte", "Bella", "Lewis", "Yourself"}
local Customs = {}

for i, v in pairs(Player:WaitForChild("PlayerGui"):WaitForChild("Main"):WaitForChild("Selection"):WaitForChild("Customs"):GetChildren()) do
	if v:IsA("Frame") and v.Name ~= "Base" and v.Name ~= "Create" then
		table.insert(Customs, v.Name)
	end
end

CharacterSection:NewDropdown("Characters", "DropdownInf", Characters, function(currentOption)
	local CurrentCFrame = HumanoidRootPart.CFrame
	Post:FireServer("Select", currentOption)
	task.wait(0.25)
	Character:PivotTo(CurrentCFrame)
end)

CustomSection:NewDropdown("Customs", "DropdownInf", Customs, function(currentOption)
	local CurrentCFrame = HumanoidRootPart.CFrame
	Post:FireServer("Select", currentOption, true)
	task.wait(0.25)
	Character:PivotTo(CurrentCFrame)
end)

-- Misc Gui

local Camera = workspace.CurrentCamera

MiscSection:NewTextBox("View Player", "Autofills When Entered", function(txt)
	if FindPlayer(txt) then
		Camera.CameraSubject = FindPlayer(txt).Character.Humanoid
	end
end)

MiscSection:NewButton("Unview", "Reset Camera Subject", function()
	Camera.CameraSubject = Character.Humanoid
end)

ParticleSection:NewToggle("Bubbles", "Enables/Disables Bubble Particles", function(state)
	if state then
		Post:FireServer("Speed", true)
	else
		Post:FireServer("Speed", false)
	end
end)

local SplashLoop = false
local SplashSize = 10
local SplashAmount = 1

ParticleSection:NewToggle("Splash", "Enables/Disables Splash Particles", function(state)
	if state then
		SplashLoop = true
		while task.wait(1 / SplashAmount) and SplashLoop do
			Post:FireServer("Splash", HumanoidRootPart.Position - Vector3.new(0, 1, 0), SplashSize)
		end
	else
		SplashLoop = false
	end
end)

ParticleSection:NewSlider("Splash Size", "Resizes Particle Size, Default Size is 10", 100, 1, function(s)
	SplashSize = s
end)

ParticleSection:NewSlider("Splash Amount", "Changes Particle Amount, Default Amount is 1", 10, 1, function(s)
	SplashAmount = s
end)

-- Script Gui

ScriptSection:NewButton("Infinite Yield", "Opens Infinite Yield", function()
	loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
end)

ScriptSection:NewButton("Hydroxide", "Opens Hydroxide", function()
	local owner = "Upbolt"
	local branch = "revision"

	local function webImport(file)
		return loadstring(game:HttpGetAsync(("https://raw.githubusercontent.com/%s/Hydroxide/%s/%s.lua"):format(owner, branch, file)), file .. '.lua')()
	end

	webImport("init")
	webImport("ui/main")
end)

ScriptSection:NewButton("Lazy Dex", "Opens Lazy Dex", function()
	loadstring(game:HttpGet("https://raw.githubusercontent.com/Babyhamsta/RBLX_Scripts/main/Universal/Lazy_Dex.lua"))()
end)

-- Custom Mouse

local RunService = game:GetService("RunService")
local GuiService = game:GetService("GuiService")
local UserInputService = game:GetService("UserInputService")

local FilterObjects = {}

local raycastParams = RaycastParams.new()
raycastParams.FilterDescendantsInstances = FilterObjects
raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

RunService.RenderStepped:Connect(function()

	local inset = GuiService:GetGuiInset() 
	local mouseLocation = UserInputService:GetMouseLocation() - inset -- Subtract by the GUI Inset since GetMouseLocation does not take that into account and gives an inaccurate position.

	local cameraRay = game.Workspace.CurrentCamera:ScreenPointToRay(mouseLocation.X, mouseLocation.Y)

	-- Make a system here that adds filters to the raycastParam.

	local raycastResult = game.Workspace:Raycast(cameraRay.Origin, cameraRay.Direction * 10000, raycastParams)

	if raycastResult and raycastResult.Instance then
		MouseTarget = raycastResult.Instance
	end
	if raycastResult and raycastResult.Position then
		MousePosition = raycastResult.Position
	end
end)

-- Flight

local tweenserv = game:GetService("TweenService")
local swimidle, swim, jumpID, fallID, idleAnim, moveAnim, lastAnim, animate, humanoid
function loadanims()
	animate = Character:FindFirstChild("Animate")
	if animate then
		for i, v in pairs(animate:GetDescendants()) do
			if v:IsA("Animation") then
				if v.Name == "SwimIdle" then
					swimidle = v
				elseif v.Name == "Swim" then
					swim = v
				end
			end
		end
		jumpID = animate:FindFirstChild("jump"):FindFirstChildOfClass("Animation").AnimationId
		fallID = animate:FindFirstChild("fall"):FindFirstChildOfClass("Animation").AnimationId
		if humanoid:FindFirstChild("Animator") then
			if swimidle then
				idleAnim = humanoid.Animator:LoadAnimation(swimidle);
			end
			if swim then
				moveAnim = humanoid.Animator:LoadAnimation(swim);
			end
		end
		lastAnim = idleAnim;
	end
end
if Character then
	if Character:FindFirstChild("Humanoid") then
		humanoid = Character:FindFirstChild("Humanoid")
	end
	loadanims()
end

game.Players.LocalPlayer.CharacterAdded:Connect(function(chr)
	Character = chr
	humanoid = chr:WaitForChild("Humanoid")
	local loadhum = coroutine.create(humchanged)
	coroutine.resume(loadhum)
	loadanims()
end)

while Character and (not Character.Parent) do Character.AncestryChanged:Wait(); end

local bodyGyro = Instance.new("BodyGyro");
bodyGyro.maxTorque = Vector3.new(1, 1, 1)*10^6;
bodyGyro.P = 10^6;

local bodyVel = Instance.new("BodyVelocity");
bodyVel.maxForce = Vector3.new(1, 1, 1)*10^6;
bodyVel.P = 10^4;

local FlightSpeed = 16
local isFlying = false;
local isJumping = false;
local isMoving = false;
local isStopped = true;
local movement = {forward = 0, backward = 0, right = 0, left = 0};

-- functions

local function setFlying(flying)
	isFlying = flying;
	bodyGyro.Parent = isFlying and HumanoidRootPart or nil;
	bodyVel.Parent = isFlying and HumanoidRootPart or nil;
	bodyGyro.CFrame = HumanoidRootPart.CFrame;
	bodyVel.Velocity = Vector3.new();

	if (isFlying) then
		lastAnim = isMoving and moveAnim or idleAnim;
		if lastAnim then
			lastAnim:Play();
		end
		if animate then
			animate.jump:FindFirstChildOfClass("Animation").AnimationId = "http://www.roblox.com/asset/?id=0"
			animate.fall:FindFirstChildOfClass("Animation").AnimationId = "http://www.roblox.com/asset/?id=0"
		end
	else
		if lastAnim then
			lastAnim:Stop();
		end
		if animate then
			animate.jump:FindFirstChildOfClass("Animation").AnimationId = jumpID
			animate.fall:FindFirstChildOfClass("Animation").AnimationId = fallID
		end
	end
end

local function onUpdate(dt)
	if (isFlying) then
		local cf = Camera.CFrame;
		local direction = cf.rightVector*(movement.right - movement.left) + cf.lookVector*(movement.forward - movement.backward);
		if (direction:Dot(direction) > 0) then
			direction = direction.unit;
		end

		bodyVel.Velocity = direction * FlightSpeed * 1.25;

		if not isMoving then
			tweenserv:Create(bodyGyro, TweenInfo.new(1), {CFrame = cf}):Play()
		else
			local newcf
			if movement.right - movement.left ~= 0 then
				if movement.right ~= 0 then
					newcf = cf * CFrame.Angles(0, math.rad(((movement.left-movement.right)*90)-((movement.backward-movement.forward)*45)), 0)
				elseif movement.left ~= 0 then
					newcf = cf * CFrame.Angles(0, math.rad(((movement.left-movement.right)*90)+((movement.backward-movement.forward)*45)), 0)
				end
			else
				newcf = cf * CFrame.Angles(0, math.rad(movement.backward*180), 0)
			end
			tweenserv:Create(bodyGyro, TweenInfo.new(.25), {CFrame = newcf}):Play()
		end
	end
end

local function onKeyRequest(flytype)

	if (not humanoid or humanoid:GetState() == Enum.HumanoidStateType.Dead) then
		return;
	end

	if flytype == "Stop" then
		setFlying(false);
		isJumping = false;
		isStopped = true;
		if moveAnim and idleAnim then
			moveAnim:Stop();
			idleAnim:Stop();
		end
	elseif flytype == "Start" then
		setFlying(true);
		isStopped = false;
	end
end

local function onStateChange(old, new)
	if (new == Enum.HumanoidStateType.Landed) then	
		isJumping = false;
	elseif (new == Enum.HumanoidStateType.Jumping) then
		isJumping = true;
	end
end

local function movementBind(actionName, inputState, inputObject)
	if (inputState == Enum.UserInputState.Begin) then
		movement[actionName] = 1;
	elseif (inputState == Enum.UserInputState.End) then
		movement[actionName] = 0;
	end

	if (isFlying) then
		isMoving = movement.right + movement.left + movement.forward + movement.backward > 0;

		if isMoving then
			tweenserv:Create(Camera, TweenInfo.new(.5), {FieldOfView = 85}):Play()
		else
			tweenserv:Create(Camera, TweenInfo.new(.5), {FieldOfView = 70}):Play()
		end
		local checkmoving = movement.left-movement.right ~= 0 or movement.backward-movement.forward ~= 0
		local nextAnim = checkmoving and moveAnim or idleAnim;
		if (nextAnim ~= lastAnim) then
			lastAnim:Stop()
			lastAnim = nextAnim;
			lastAnim:Play(1, -1, 1)
			for i = 1, 10 do
				if not isStopped then
					lastAnim:AdjustWeight(i/10, 0.05)
					wait(.05)
				end
			end
		end
	end

	return Enum.ContextActionResult.Pass;
end

-- connections

local flydb = false
function humchanged()
	humanoid.StateChanged:Connect(onStateChange);
end

MiscSection:NewToggle("Flight", "Enables/Disables Flight", function(state)
	if state then
		if not flydb then
			onKeyRequest("Start")
			flydb = true
		else
			flydb = false
		end
	else
		if flydb then
			onKeyRequest("Stop")
			flydb = false
		else
			flydb = true
		end
	end
end)

MiscSection:NewSlider("Flight Speed", "Default Speed is 16", 64, 1, function(s)
	FlightSpeed = s
end)

game:GetService("ContextActionService"):BindAction("forward", movementBind, false, Enum.PlayerActions.CharacterForward);
game:GetService("ContextActionService"):BindAction("backward", movementBind, false, Enum.PlayerActions.CharacterBackward);
game:GetService("ContextActionService"):BindAction("left", movementBind, false, Enum.PlayerActions.CharacterLeft);
game:GetService("ContextActionService"):BindAction("right", movementBind, false, Enum.PlayerActions.CharacterRight);

game:GetService("RunService").RenderStepped:Connect(onUpdate)
